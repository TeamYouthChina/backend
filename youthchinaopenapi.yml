openapi: 3.0.0
info:
  version: 1.1.2
  title: YouthChina
  license:
    name: MIT
servers:
  - url: 'http://youthchina.io/api/v1'
paths:
  '/job/{id}':
    get:
      tags:
        - Job
      summary: get job info
      description: get job info by id
      operationId: getJob
      parameters:
        - in: query
          name: detailLevel
          required: true
          schema:
            type: integer
            default: 1
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: job info
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    $ref: '#/components/schemas/Job'
                  status:
                    $ref: '#/components/schemas/Status'
  '/job/search':
    post:
      tags:
        - Job
      summary: job search
      description: search job by complex conditions
      operationId: searchJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Job'
      responses:
        '201':
          description: search result
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: object
                    properties:
                      searchResult:
                        type: array
                        items:
                          $ref: '#/components/schemas/Job'
                  status:
                    $ref: '#/components/schemas/Status'
  '/applicants/{id}':
    get:
      tags:
        - Applicant
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: return target user
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    $ref: '#/components/schemas/Applicant'
                  status:
                    $ref: '#/components/schemas/Status'
        '404':
          description: cannot find
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
              example:
                status:
                  code: 4041
                  reason: 'Cannot find user with id 14'
  '/applicants':
    post:
      tags:
        - Applicant
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Applicant'
      responses:
        '201':
          description: created
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                  - applicant
                properties:
                  content:
                    $ref: '#/components/schemas/Applicant'
                  status:
                    $ref: '#/components/schemas/Status'

  '/applicants/{id}/contacts':
    get:
      tags:
        - Applicant
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: return target user's 1
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    $ref: '#/components/schemas/ContactInfo'
                  status:
                    $ref: '#/components/schemas/Status'
        '404':
          description: cannot find
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
              example:
                status:
                  code: 4041
                  reason: 'Cannot find user with id 14'
  '/applicants/{id}/educations':
    get:
      tags:
        - Applicant
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: return target user's educations
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/EducationInfo'
                  status:
                    $ref: '#/components/schemas/Status'
        '404':
          description: cannot find
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
              example:
                status:
                  code: 4041
                  reason: 'Cannot find user with id 14'
  '/applicants/{id}/projects':
    get:
      tags:
        - Applicant
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: return target user's projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Project'
                  status:
                    $ref: '#/components/schemas/Status'
        '404':
          description: cannot find
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
              example:
                status:
                  code: 4041
                  reason: 'Cannot find user with id 14'
  '/applicants/{id}/experiences':
    get:
      tags:
        - Applicant
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: return target user's works
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkExperienceInfo'
                  status:
                    $ref: '#/components/schemas/Status'
        '404':
          description: cannot find
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
              example:
                status:
                  code: 4041
                  reason: 'Cannot find user with id 14'
  '/applicants/{id}/certificates':
    get:
      tags:
        - Applicant
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: return target user's works
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Certification'
                  status:
                    $ref: '#/components/schemas/Status'
        '404':
          description: cannot find
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
              example:
                status:
                  code: 4041
                  reason: 'Cannot find user with id 14'
  '/applicants/{id}/extracurriculars':
    get:
      tags:
        - Applicant
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: return target user's works
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Extracurricular'
                  status:
                    $ref: '#/components/schemas/Status'
        '404':
          description: cannot find
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
              example:
                status:
                  code: 4041
                  reason: 'Cannot find user with id 14'
  '/jobs/{id}/apply':
    post:
      tags:
        - Application
      parameters:
        - name: id
          in: path
          description: id of the job
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: apply successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    $ref: '#/components/schemas/Application'
                  status:
                    $ref: '#/components/schemas/Status'
        '404':
          description: job not found
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
              example:
                status:
                  code: 4042
                  reason: 'Cannot find job with id 124'
        '403':
          description: cannot apply for job
          content:
            application/json:
              schema:
                type: object
                required:
                  - status
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
              example:
                status:
                  code: 4032
                  reason: 'cannot apply for job because it has passed deadline'
  '/applicants/{id}/applications':
    get:
      tags:
        - Application
      parameters:
        - name: id
          in: path
          description: user id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: return the application of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: array
                    items:
                      $ref: '#/components/schemas/Application'
                  status:
                    $ref: '#/components/schemas/Status'
        '404':
          description: user not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/Status'
              example:
                status:
                  code: 4041
                  reason: 'Cannot find user with id 14'
  '/jobs/{id}/collect':
    post:
      tags:
        - Collection
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        '201':
          description: collect successful
        '400':
          description: cannot collect this job, maybe the job has already deleted
  '/users/{id}/collections':
    get:
      tags:
        - Collection
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
        - name: type
          in: query
          schema:
            type: string
            enum:
              - job
              - company
      responses:
        '200':
          description: return users' Collection
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: object
                    properties:
                      companies:
                        type: array
                        items:
                          $ref: '#/components/schemas/CompanyCollections'
                      jobs:
                        type: array
                        items:
                          $ref: '#/components/schemas/JobCollections'
                  status:
                    $ref: '#/components/schemas/Status'
  '/collections/{id}':
    delete:
      tags:
        - Collection
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
          description: id of collection
      responses:
        '204':
          description: delete target collection
  '/questions':
    post:
      tags:
        - Question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '201':
          description: create question
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    $ref: '#/components/schemas/Question'
                  status:
                    $ref: '#/components/schemas/Status'
        '400':
          description: cannot create question due to user's error
  '/questions/{id}':
    get:
      tags:
        - Question
      parameters:
        - name: id
          required: true
          in: path
          description: question id
          schema:
            type: integer
      responses:
        '200':
          description: return target question
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    $ref: '#/components/schemas/Question'
                  status:
                    $ref: '#/components/schemas/Status'
        '404':
          description: target question does not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatus'
    delete:
      tags:
        - Question
      parameters:
        - name: id
          required: true
          in: path
          description: question id
          schema:
            type: integer
      responses:
        '204':
          description: deleted successed.
        '404':
          description: target question does not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorStatus'
    put:
      tags:
        - Question
      parameters:
        - name: id
          required: true
          in: path
          description: id of the question
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '204':
          description: updated success
  '/questions/{id}/answers':
    get:
      tags:
        - Question
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      responses:
        '200':
          description: the answer list of target question
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    type: object
                    properties:
                      answers:
                        type: array
                        items:
                          $ref: '#/components/schemas/Answer'
                  status:
                    $ref: '#/components/schemas/Status'
  '/questions/{id}/invite':
    post:
      tags:
        - Question
      parameters:
        - name: id
          required: true
          in: path
          
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                invited:
                  type: array
                  items:
                    type: integer
      responses:
        '201':
          description: invitation send successfully.
  '/questions/{id}/upvote':
    post:
      tags:
        - Question
      parameters:
        - name: id
          required: true
          in: path
      responses:
        '201':
          description: upvote successfullly
  '/questions/{id}/follow':
    post:
      tags:
        - Question
      parameters:
        - name: id
          required: true
          in: path
      responses: 
        '201':
          description: upvote successfullly
  '/answers/{id}':
    get:
      tags:
        - Answer
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      responses:
        '200':
          description: target answer
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    $ref: '#/components/schemas/Answer'
                  status:
                    $ref: '#/components/schemas/Status'
    put:
      tags:
        - Answer
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
      responses:
        '200':
          description: target answer
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    $ref: '#/components/schemas/Answer'
                  status:
                    $ref: '#/components/schemas/Status'
    delete:
      tags:
        - Answer
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      responses:
        '204':
          description: success
        '403':
          description: do not have authority to delete answer
  '/answers':
    post:
      tags:
        - Answer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - id
              - body
              properties:
                id:
                  type: integer
                body:
                  $ref: '#/components/schemas/RichText'
                is_anonymous:
                  type: boolean
                  default: false
                create_at:
                  type: integer
                
      responses:
        '201':
          description: target answer
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    $ref: '#/components/schemas/Answer'
                  status:
                    $ref: '#/components/schemas/Status'
  '/answers/{id}/comments': 
    post:
      tags:
        - Answer
      requestBody:
        content:
          application/json:
              schema:
                type: object
                required:
                - id
                - body
                properties:
                  id:
                    type: integer
                  body:
                    $ref: '#/components/schemas/RichText'
                  is_anonymous:
                    type: boolean
                    default: false
                  create_at:
                    type: integer
      responses:
        '201':
          description: comments successfully
  '/answers/{id}/upvote':
    post:
      tags:
        - Answer
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      responses:
        '201':
          description: upvote successfullly
  '/applicants/resgister':
    post:
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - date_of_birth
                - phonenumber
                - email
                - current_city
                - prefer_industry
                - prefer_city
              properties:
                name:
                  type: string
                date_of_birth:
                  type: string
                phonenumber:
                  type: string
                email: 
                  type: string
                current_city:
                  type: integer
                prefer_industry:
                  type: integer
                prefer_city:
                  type: integer
      responses:
        '201':
          description: register success
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    $ref: '#/components/schemas/Applicant'
                  status:
                    $ref: '#/components/schemas/Status'
  '/comments/{id}':
    get:
      tags:
        - Comment
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    $ref: '#/components/schemas/Comment'
                  status:
                    $ref: '#/components/schemas/Status'
  '/login':
    post:
      tags:
        - Security
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - password
              properties:
                id:
                  type: integer
                password:
                  type: string
      responses:
        '200':
          description: login success
          content:
            application/json:
              schema:
                type: object
                properties:
                  content:
                    $ref: '#/components/schemas/User'
                  status:
                    $ref: '#/components/schemas/Status'

components:
  schemas:
    Status:
      type: object
      properties:
        code:
          type: integer
          format: int64
        reason:
          type: string
    ErrorStatus:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
    JobSearch:
      type: object
      required:
        - page
        - size
      properties:
        key:
          type: string
        industry:
          type: string
        tagList:
          type: array
          items:
            type: string
        page:
          type: integer
        size:
          type: integer
    Job:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          description: name of job
        organization:
          $ref: '#/components/schemas/Organization'
        location:
          type: integer
        type:
          type: string
          enum:
            - full-time
            - part-time
            - internship
        deadLine:
          type: string
    Organization:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        avatarUrl:
          type: string
          pattern: '(http|https)://(.?)*'
    User:
      type: object
      required:
        - id
        - username
        - email
        - phonenumber
        - register_date
        - real_name
        - gender
        - nation
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        phonenumber:
          type: string
        register_date:
          type: string
        real_name:
          type: string
        gender:
          type: string
          enum:
            - male
            - female
        nation:
          type: string
        avatar_url:
          type: string
        role:
          type: string
        age:
          type: integer
    NewUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          required:
            - password
          properties:
            password:
              type: string

    ContactInfo:
      type: object
      required:
        - emails
        - phonenumbers
      properties:
        emails:
          type: array
          items:
            type: string
            pattern: (.?)*@(.?)*
        phonenumbers:
          type: array
          items:
            type: string
    EducationInfo:
      type: object
      required:
        - university
        - major
        - degree
        - duration
        - location
      properties:
        university:
          type: string
        major:
          type: string
        degree:
          type: string
        duration:
          $ref: '#/components/schemas/Duration'
        location:
          type: string
        note:
          type: string
    WorkExperienceInfo:
      type: object
      required:
        - employer
        - position
        - duration
        - location
      properties:
        employer:
          type: string
        position:
          type: string
        duration:
          $ref: '#/components/schemas/Duration'
        location:
          type: string
        note:
          type: string
    Certification:
      type: object
      required:
        - name
        - duration
      properties:
        name:
          type: string
        authority:
          type: string
        duration:
          $ref: '#/components/schemas/Duration'
        note:
          type: string
    Extracurricular:
      type: object
      required:
        - name
        - role
        - organization
        - duration
        - location
      properties:
        name:
          type: string
        role:
          type: string
        organization:
          type: string
        duration:
          $ref: '#/components/schemas/Duration'
        location:
          type: string
        note:
          type: string
    Project:
      type: object
      required:
        - name
        - role
        - duration
      properties:
        name:
          type: string
        role:
          type: string
        duration:
          $ref: '#/components/schemas/Duration'
        note:
          type: string
    Duration:
      type: object
      properties:
        begin:
          type: string
          pattern: timestamp
        end:
          type: string
          pattern: timestamp
    Applicant:
      type: object
      required:
        - id
        - name
        - avatarUrl
      properties:
        id:
          type: integer
        name:
          type: string
        avatarUrl:
          type: string
        isInJob:
          type: boolean
        currentCompany:
          $ref: '#/components/schemas/Company'
        educations:
          type: array
          items:
            $ref: '#/components/schemas/EducationInfo'
        contacts:
          $ref: '#/components/schemas/ContactInfo'
        works:
          type: array
          items:
            $ref: '#/components/schemas/WorkExperienceInfo'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        extracurriculars:
          type: array
          items:
            $ref: '#/components/schemas/Extracurricular'
        certifications:
          type: array
          items:
            $ref: '#/components/schemas/Certification'
    JobResponse:
      allOf:
        - $ref: '#/components/schemas/Job'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/Status'
    ApplicantResponse:
      allOf:
        - $ref: '#/components/schemas/Applicant'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/Status'
    ContactResponse:
      allOf:
        - $ref: '#/components/schemas/ContactInfo'
        - type: object
          properties:
            status:
              $ref: '#/components/schemas/Status'
    Company:
      allOf:
        - $ref: '#/components/schemas/Organization'
        - type: object
    Application:
      type: object
      required:
        - id
        - companyId
        - positionId
        - status
      properties:
        id:
          type: integer
        companyId:
          type: integer
        positionId:
          type: integer
        status:
          type: string
    CompanyCollections:
      type: object
      required:
        - id
        - company
        - status
      properties:
        id:
          type: integer
        company:
          $ref: '#/components/schemas/Company'
        status:
          $ref: '#/components/schemas/CollectionStatus'
    JobCollections:
      type: object
      required:
        - id
        - job
        - status
      properties:
        id:
          type: integer
        job:
          $ref: '#/components/schemas/Job'
        status:
          $ref: '#/components/schemas/CollectionStatus'
    CollectionStatus:
      type: string
      enum:
        - active
        - inactive
    AnswerBasic:
      type: object
      required:
        - id
        - creator
        - body
        - is_anonymous
        - create_at
      properties:
        id:
          type: integer
          description: answer id
        creator:
          $ref: '#/components/schemas/User'
        body:
          type: string
          description: answer body
        is_anonymous:
          type: boolean
          default: false
        create_at:
          type: integer
          description: create time of answer
    QuestionBasic:
      type: object
      required:
        - id
        - creator
        - title
        - is_anonymous
        - create_at
      properties:
        id:
          type: integer
          description: question id
        creator:
          $ref: '#/components/schemas/User'
        title:
          type: string
          description: question title
        body:
          type: string
          description: question body
        is_anonymous:
          type: boolean
          default: flase
        create_at:
          type: integer
          description: create time of question
    Question:
      allOf:
        - $ref: '#/components/schemas/QuestionBasic'
        - type: object
          properties:
            answers:
              type: array
              items:
                $ref: '#/components/schemas/AnswerBasic'
    Answer:
      allOf:
        - $ref: '#/components/schemas/AnswerBasic'
        - type: object
          properties:
            question:
              $ref: '#/components/schemas/QuestionBasic'
    RichText:
      type: object
      required:
        - richtext
        - resourceList
      properties:
        richtext:
          type: object
        resourceList:
          type: array
          items: 
            type: string
    Comment:
      type: object
      required:
        - id
        - creator
        - body
        - create_at
        - is_anonymous
      properties:
        id:
          type: integer
        creator:
          $ref: '#/components/schemas/User'
        body:
          type: string
        create_at:
          type: integer
        is_anonymous:
          type: boolean
          default: false


